#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:nil
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:nil e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:nil todo:t |:t
#+TITLE: Exercises I/O
#+DATE: <2019-03-25 Tue>
#+AUTHOR: Bamse
#+EMAIL: jonan15@student.sdu.dk
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.2.2 (Org mode 9.1.14)

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: \today

* Hello, World!

- Write a Hello World program that prints some text.
- Write a program that asks for your name, reads it from stdin and greets that person.
- Write a program that counts the number of lines read from stdin
- Write a program that transforms text from stdin to upper case.


* Scoreboard

Make a program that calculates the scores of some players in the following way. Input is given in a file, starting with a line stating which players were playing, each represented as an uppercase letter. The next line shows, the order in which players gained or lost points as a string, where an uppercase letter means the corresponding player gained a point and a lowercase letter means that player lost a point.

As an example two players ~A~ and ~B~ played a short game:

#+BEGIN_SRC <>
AB
AABaB
#+END_SRC

First ~A~ won two rounds, then ~B~ won, then ~A~ lost, and finally ~B~ won again. The final result is ~A~ has a score of ~1~ and ~B~ a score of ~2~.

You should write the result to a new file, in a reasonable way. For example each player on its own line:

#+BEGIN_SRC <>
A: 1
B: 2
#+END_SRC

But initially you should probably just print/show the object, as I prefer you thinking about how to solve the problem, rather than details of how to present it in a pretty way.

Hint: Start with a simple solution that works according to some (or a lot) assumptions, and later refactor your solution to be better.

Hint: You might find that ~Data.Map.Strict~ supplies a helpful data structure and helper functions.

*MORE EXAMPLES*

Input:
#+BEGIN_SRC <>
ABC
ABCABCbaa
#+END_SRC

Output:
#+BEGIN_SRC <>
A: 0
B: 1
C: 2
#+END_SRC


Input:
#+BEGIN_SRC <>
quickfox
QFOqUQFIIOoxXCckxxoQ
#+END_SRC

Output:
#+BEGIN_SRC <>
C: 0
F: 2
I: 2
K: -1
O: 0
Q: 2
U: 1
X: -2
#+END_SRC

** Some improvements
After you made your first version, improve it, so it works from fewer assumptions. This may be fast if you made a great solution initially.

Things you may consider improving:
- If you assumed the players came in ordered like ~['A'..]~, you could change it so it works for any order of players, such as ~"BXM"~, or even ~"bXm"~.
- Improve the printing of the result, so it shows more like the example.


* Lazy IO
Make two programs, one that gets the contents of a file, and prints the first character, and another one that prints the last character of that file.

Use some kind of time tool, and see the difference in time when running the programs on a large file, such as the ~lipsum.txt~ file uploaded here.


* Another game: Nim
The game Nim exists in many variants, usually between two players. One of the simple variants is played with a pile of items, say, 15, and each round the current player must take a number of items in some range, say, 1-4 items. The goal is to not take the last item, so the range does not include 0.

You should implement this game, you can decide on the rules to play by, or let them be decided at the beginning of the game. The program should write the number of items left after each player has had their turn.

To save some time, you don't need to think about which players turn it is, the people playing it can keep track of that themselves.

** Improvements
Ideas for additions to the game:
- The program actually terminates when the game is finished (number of items == 0), with a small message.
- As mentioned, the number of items and the range is decided by input at the beginning of the program.
- Make it so there are multiple piles each with their own number of items, so the player first chooses which pile to draw from, then the number of items to draw.
- Make a datastructure for the game, and make it a custom instantiation of the ~Show~ typeclass. Use this to show the game, rather than simply the number of items left in the pile.
- Make it part of the ~Game~ typeclass, from the typeclass exercise from sheet 3, if you made it.


* Working towards monads
It is important you understand types, typeclasses and functors to a certain degree before tackling monads, so here are some more exercises on that.

** Types and typeclasses
If you haven't already, read and follow along the section "A yes-no typeclass" in chapter 7. Feel free to make your own type and make it an instance as well.

Also make sure you've done exercise 5 on sheet 3.

Make a ~Describable~ typeclass. Instances must implement a function ~describe~ that takes something describable and returns a tuple of the description and the thing, ~(String, a)~. Make some types instances of ~Describable~, e.g. ~Bool~, ~Char~, some custom type.

#+BEGIN_SRC <haskell>
ghci> describe True
("One of my favorite booleans: True",True)
ghci> describe 'Y'
("This one has character: 'Y'",'Y')
#+END_SRC

** Functors
Again, make sure you've made exercises 6 on sheet 3, which includes following the example from "The Functor typeclass" in chapter 7.

Remember, we only have to implement ~fmap~ for a type to become members of the ~Functor~ typeclass. If we think of functors as boxes that hold some value, then ~fmap~ takes a function that transforms the held value and creates a new box with the new value inside.

Make a type ~Described a~ that holds any type, but has a description (~String~) as well. You can use record syntax to define it and/or make extra functions to retrieve or change the description.

Make ~Described~ an instance of the ~Functor~ typeclass, by making ~fmap~ function on the value, and not changing the description.

Consider, how you would take any simple value and make it into a ~Described~ (if you are not given a description). Also consider how you would handle the case where you have a function in a described, along with a value in a described and you would like to apply the function to the value and keep the result in a described. In "pseudo" Haskell:

#+BEGIN_SRC <haskell>
(Described (+3) "Plus three") `apply` (Described 39 "A good number") = (Described 42 ?)
#+END_SRC

Once you have decided how you want to handle that, you can make your ~Described~ into an ~Applicative~ functor.


* Monads
Note that LYH says that you do not need to make your type an instance of ~Applicative~ to make an instance of ~Monad~, but THIS IS NOT TRUE in recent versions of GHC this is a requirement.

Monads are much like applicative functors, but they also start to make a lot more sense, in my opinion.

Make sure you've read and followed along the example in "Walk the line" in chapter 11 which shows one way to utilize the ~Maybe~ monad. Also make sure to try to "desugar" the do notation in the examples throughout the "do notation" section.

In Java you can make objects representing computations that might finish in the future, and sometimes you'd like to make more computations on whatever the result may be. You can encapsulate the new result in a new future, to further postpone the computations. This is actually usually the case in Haskell because it is lazy, but we continue with the example anyways. 

In the following example try to make ~Future~ an instance of ~Monad~. For ~>>=~ it should just unwrap the value inside the ~Future~ and apply the function to it.

#+BEGIN_SRC <haskell>
data Future a = Future a deriving Show

instance Functor Future where
  fmap f (Future x) = Future (f x)

instance Applicative Future where
  pure x = Future x
  (Future f) <*> (Future x) = Future (f x)
#+END_SRC

Once you've made ~Future~ into a monad, try "desugaring" ~foo (Future 21)~, where ~foo~ is defined as:

#+BEGIN_SRC <haskell>
foo :: (Num a) => Future a -> Future a
foo m = do
  x <- m
  return (x*2)
#+END_SRC

